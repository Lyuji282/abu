service: abu-cognito

custom:
  project: ${file(../config/${self:provider.stage}.yml):PROJECT_NAME}
  currentStage: ${self:provider.stage}
  userPoolName: ${self:custom.project}-${self:provider.stage}
  userPoolClientName: ${self:custom.project}-client-${self:provider.stage}
  userPoolClientDomain: ${self:custom.project}-${self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage}
  region: ${file(../config/${self:provider.stage}.yml):REGION}
  profile: ${file(../config/${self:provider.stage}.yml):PROFILE}
  environment:
    TZ: ${file(../config/${self:provider.stage}.yml):TZ, "Asia/Manila"}

resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        AutoVerifiedAttributes:
          - email
        # EmailConfiguration:
        #   EmailSendingAccount: DEVELOPER
        #   SourceArn: ${file(../config/${self:provider.stage}.yml):SES_SOURCE_ARN}
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        Schema:
          - Mutable: true
            Name: given_name
            Required: true
          - Mutable: true
            Name: family_name
            Required: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        SupportedIdentityProviders:
          - COGNITO
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        CallbackURLs:
          - http://localhost:8060
        LogoutURLs:
          - http://localhost:8060
        UserPoolId:
          Ref: CognitoUserPool
    CognitoUserPoolClientDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:custom.userPoolClientDomain}
        UserPoolId:
          Ref: CognitoUserPool
    CreateCogUserDeletePolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:service}-delete-${self:custom.currentStage}
        Description: "Policy for deleting cognito user"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "cognito-idp:AdminDeleteUser"
              Resource:
                - Fn::GetAtt:
                    - CognitoUserPool
                    - Arn
    CognitoUser:
      Type: AWS::IAM::User
      Properties:
        Policies:
          - PolicyName: cognito-access
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - cognito-idp:AdminDeleteUser
                    - cognito-idp:ListUsersInGroup
                    - cognito-idp:ListGroups
                    - cognito-idp:AdminCreateUser
                    - cognito-idp:AdminSetUserPassword
                    - cognito-idp:AdminRemoveUserFromGroup
                    - cognito-idp:AdminAddUserToGroup
                    - cognito-idp:AdminListGroupsForUser
                    - cognito-idp:AdminUpdateUserAttributes
                    - cognito-idp:AdminGetUser
                    - cognito-idp:ListUsers
                  Resource:
                    Fn::GetAtt:
                      - CognitoUserPool
                      - Arn

    CognitoUserAccessKey:
      Type: AWS::IAM::AccessKey
      Properties:
        UserName:
          Ref: CognitoUser

  Outputs:
    AbuCognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
      Export:
        Name: AbuCognitoUserPoolArn-${self:custom.currentStage}
    AbuCognitoUserPoolId:
      Value:
        Ref: CognitoUserPool
      Export:
        Name: AbuCognitoUserPoolId-${self:custom.currentStage}
    CognitoUserAccessKey:
      Value:
        Ref: CognitoUserAccessKey
      Export:
        Name: AbuCognitoUserAccessKey-${self:custom.currentStage}
    CognitoUserSecretKey:
      Value:
        Fn::GetAtt:
          - CognitoUserAccessKey
          - SecretAccessKey
      Export:
        Name: AbuCognitoUserSecretKey-${self:custom.currentStage}
